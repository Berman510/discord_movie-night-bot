name: Deploy Production Infrastructure

on:
  push:
    paths:
      - 'terraform/**'
    branches: [main, master]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-west-2
  TF_VAR_environment: prod
  # Terraform variables from secrets
  TF_VAR_bot_discord_token_prod: ${{ secrets.DISCORD_TOKEN_PROD }}
  TF_VAR_bot_client_id_prod: ${{ secrets.CLIENT_ID_PROD }}
  TF_VAR_bot_guild_id_prod: ${{ secrets.GUILD_ID_PROD }}
  TF_VAR_bot_omdb_api_key_prod: ${{ secrets.OMDB_API_KEY_PROD }}
  TF_VAR_discord_public_key_prod: ${{ secrets.DISCORD_PUBLIC_KEY_PROD }}
  TF_VAR_bot_discord_token_beta: ${{ secrets.DISCORD_TOKEN_BETA }}
  TF_VAR_bot_client_id_beta: ${{ secrets.CLIENT_ID_BETA }}
  TF_VAR_bot_guild_id_beta: ${{ secrets.GUILD_ID_BETA }}
  TF_VAR_bot_omdb_api_key_beta: ${{ secrets.OMDB_API_KEY_BETA }}
  TF_VAR_aws_region: us-west-2
  TF_VAR_project_name: watchparty-bot
  TF_VAR_dashboard_project_name: watchparty
  TF_VAR_domain_name: bermanoc.net
  TF_VAR_bot_cpu: 256
  TF_VAR_bot_memory: 512
  TF_VAR_bot_image_tag_beta: beta-latest
  TF_VAR_bot_image_tag_prod: prod-latest
  TF_VAR_pebblehost_beta_branch: v1.16.3
  TF_VAR_pebblehost_prod_branch: main
  TF_VAR_enable_monitoring_instance: true
  TF_VAR_monitoring_instance_type: t4g.nano
  TF_VAR_monitoring_key_name: ${{ secrets.EC2_KEY_NAME || '' }}

jobs:
  terraform:
    name: Terraform Production Infrastructure
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Select role to assume
      run: |
        if [ "${{ inputs.action }}" = "plan" ]; then
          ROLE="${{ secrets.AWS_ROLE_PLAN }}"
        else
          ROLE="${{ secrets.AWS_ROLE_APPLY }}"
        fi
        if [ -z "${ROLE}" ]; then
          # Fallback to permissive role in this account if secret is unset
          ROLE="arn:aws:iam::321447295215:role/watchparty-dashboard-github-actions-apply"
        fi
        echo "ROLE_TO_ASSUME=${ROLE}" >> $GITHUB_ENV

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-TerraformProd
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5

    - name: Terraform Plan (script)
      run: ../scripts/terraform_plan.sh

    - name: Comment Plan (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;

          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);

          for (let i = 0; i < planChunks.length; i++) {
            const output = `### 🏗️ Terraform Plan (Production Infrastructure) - Part ${i + 1}

            \`\`\`
            ${planChunks[i]}
            \`\`\`
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    - name: Terraform Apply (script)
      if: github.event.inputs.action == 'apply'
      run: ../scripts/terraform_apply.sh

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Output Infrastructure Info
      if: github.event.inputs.action != 'destroy'
      run: |
        echo "## 🏗️ Production Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
